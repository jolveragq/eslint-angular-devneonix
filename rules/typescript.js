module.exports = {
    plugins: ["@typescript-eslint"],
    rules: {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
            "error",
            {
                default: "array-simple",
                readonly: "array-simple",
            },
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/ban-types": "error",
        "brace-style": "off",
        "@typescript-eslint/brace-style": [
            "error",
            "1tbs",
            {
                allowSingleLine: true,
            },
        ],
        "@typescript-eslint/class-literal-property-style": "error",
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": ["error", "always-multiline"],
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": [
            "error",
            {
                before: false,
                after: true,
            },
        ],
        "@typescript-eslint/consistent-indexed-object-style": [
            "error",
            "record",
        ],
        "@typescript-eslint/consistent-type-assertions": [
            "error",
            {
                assertionStyle: "as",
            },
        ],
        "@typescript-eslint/consistent-type-definitions": [
            "error",
            "interface",
        ],
        "@typescript-eslint/consistent-type-imports": "off",
        "default-param-last": "off",
        "@typescript-eslint/default-param-last": "error",
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": [
            "error",
            {
                allowKeywords: true,
                allowIndexSignaturePropertyAccess: false,
            },
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                accessibility: "explicit",
                overrides: { constructors: "no-public" },
            },
        ],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        indent: "off",
        "@typescript-eslint/indent": ["error", 4],
        "init-declarations": "off",
        "@typescript-eslint/init-declarations": "off",
        "keyword-spacing": "off",
        "@typescript-eslint/keyword-spacing": "error",
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": [
            "error",
            "always",
            { exceptAfterSingleLine: false },
        ],
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                multiline: {
                    delimiter: "semi",
                    requireLast: true,
                },
                singleline: {
                    delimiter: "semi",
                    requireLast: false,
                },
                multilineDetection: "brackets",
            },
        ],
        "@typescript-eslint/member-ordering": [
            "off",
            {
                default: [
                    // Index signature
                    "signature",
                    // Decorated fields
                    "public-decorated-field",
                    "protected-decorated-field",
                    "private-decorated-field",
                    "decorated-field",
                    // Static fields
                    "public-static-field",
                    "protected-static-field",
                    "private-static-field",
                    "static-field",
                    // Instance fields
                    "public-instance-field",
                    "protected-instance-field",
                    "private-instance-field",
                    "instance-field",
                    // Abstract fields
                    "public-abstract-field",
                    "protected-abstract-field",
                    "private-abstract-field",
                    "abstract-field",
                    // Other
                    "public-field",
                    "protected-field",
                    "private-field",
                    "field",
                    // Constructors
                    "public-constructor",
                    "protected-constructor",
                    "private-constructor",
                    "constructor",
                    // Decorated methods
                    "public-decorated-method",
                    "protected-decorated-method",
                    "private-decorated-method",
                    "decorated-method",
                    // Static methods
                    "public-static-method",
                    "protected-static-method",
                    "private-static-method",
                    "static-method",
                    // Instance methods
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method",
                    "instance-method",
                    // Abstract methods
                    "public-abstract-method",
                    "protected-abstract-method",
                    "private-abstract-method",
                    "abstract-method",
                    // Other
                    "public-method",
                    "protected-method",
                    "private-method",
                    "method",
                ],
            },
        ],
        "@typescript-eslint/method-signature-style": ["error", "property"],
        "@typescript-eslint/naming-convention": "off",
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "no-dupe-class-members": "off",
        "@typescript-eslint/no-dupe-class-members": "error",
        "no-duplicate-imports": "off",
        "@typescript-eslint/no-duplicate-imports": "off",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-empty-function": [
            "error",
            { allow: ["arrowFunctions"] },
        ],
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": "error",
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": "error",
        "@typescript-eslint/no-extraneous-class": [
            "error",
            {
                allowWithDecorator: true,
                allowStaticOnly: true
            },
        ],
        "@typescript-eslint/no-floating-promises": [
            "off",
            {
                ignoreVoid: true,
            },
        ],
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implicit-any-catch": "off",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-invalid-this": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "no-loop-func": "off",
        "@typescript-eslint/no-loop-func": "error",
        "@typescript-eslint/no-loss-of-precision": "error",
        "no-magic-numbers": "off",
        "@typescript-eslint/no-magic-numbers": "off",
        "no-meaningless-void-operator": "off",
        "@typescript-eslint/no-meaningless-void-operator": "off",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": [
            "error",
            {
                checksVoidReturn: false,
            },
        ],
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "off",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": "off",
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/no-restricted-imports": [
            "error",
            {
                "patterns": [
                    {
                        "group": ["@dutti/*"],
                        "message": "The use of @dutti modules is forbidden."
                    },
                    {
                        "group": ["moment"],
                        "message": "The use of Moment is forbidden."
                    },
                    {
                        "group": ["moment-timezone"],
                        "message": "The use of Moment Timezone is forbidden."
                    }
                ]
            }
        ],
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-throw-literal": "error",
        "@typescript-eslint/no-type-alias": "off",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "off",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-unused-vars-experimental": "off",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-vars": [
            "error",
            {
                args: "after-used",
                argsIgnorePattern: "^_",
                ignoreRestSiblings: false,
                vars: "local",
                varsIgnorePattern: "^_",
            },
        ],
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": [
            "error",
            {
                functions: false,
                classes: false,
            },
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "off",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/no-useless-constructor": "off", // Ya se comprueba en "no-empty-function"
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "object-curly-spacing": "off",
        "@typescript-eslint/object-curly-spacing": ["error", "always"],
        "padding-line-between-statements": "off",
        "@typescript-eslint/padding-line-between-statements": "off",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-namespace-keyword": "off",
        "@typescript-eslint/prefer-nullish-coalescing": "off",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "off",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/promise-function-async": "off",
        quotes: "off",
        "@typescript-eslint/quotes": [
            "error",
            "single",
            {
                allowTemplateLiterals: true,
                avoidEscape: true,
            },
        ],
        "@typescript-eslint/require-array-sort-compare": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": "off",
        "no-return-await": "off",
        "@typescript-eslint/return-await": "error",
        semi: "off",
        "@typescript-eslint/semi": ["error", "always"],
        "space-before-function-paren": "off",
        "@typescript-eslint/space-before-function-paren": [
            "error",
            {
                anonymous: "always",
                named: "never",
                asyncArrow: "always",
            },
        ],
        "space-infix-ops": "off",
        "@typescript-eslint/space-infix-ops": "error",
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/typedef": "error",
        "@typescript-eslint/unbound-method": [
            "error",
            {
                ignoreStatic: true,
            },
        ],
        "@typescript-eslint/unified-signatures": "error",
    },
};
