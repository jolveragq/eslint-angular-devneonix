module.exports = {
    plugins: [],
    rules: {
        "array-callback-return": ["error", { allowImplicit: true }],
        "block-scoped-var": "error",
        "block-spacing": "error",
        camelcase: [
            "error",
            { properties: "never", ignoreDestructuring: false },
        ],
        "capitalized-comments": "off",
        "comma-style": [
            "error",
            "last",
            {
                exceptions: {
                    ArrayExpression: false,
                    ArrayPattern: false,
                    ArrowFunctionExpression: false,
                    CallExpression: false,
                    FunctionDeclaration: false,
                    FunctionExpression: false,
                    ImportDeclaration: false,
                    ObjectExpression: false,
                    ObjectPattern: false,
                    VariableDeclaration: false,
                    NewExpression: false,
                },
            },
        ],
        "computed-property-spacing": ["error", "never"],
        curly: ["error", "multi-line"],
        "dot-location": ["error", "property"],
        "eol-last": ["error", "always"],
        eqeqeq: ["error", "always", { null: "ignore" }],
        "function-call-argument-newline": ["error", "consistent"],
        "func-style": ["error", "declaration", { allowArrowFunctions: true }],
        "function-paren-newline": ["error", "multiline-arguments"],
        "guard-for-in": "error",
        "implicit-arrow-linebreak": ["off", "beside"],
        "key-spacing": ["error", { beforeColon: false, afterColon: true }],
        "keyword-spacing": [
            "error",
            {
                before: true,
                after: true,
                overrides: {
                    return: { after: true },
                    throw: { after: true },
                    case: { after: true },
                },
            },
        ],
        "linebreak-style": ["error", "unix"],
        "lines-around-directive": [
            "error",
            {
                before: "always",
                after: "always",
            },
        ],
        "max-len": [
            "error",
            125,
            4,
            {
                ignoreUrls: true,
                ignoreComments: true,
                ignoreRegExpLiterals: true,
                ignoreStrings: true,
                ignoreTemplateLiterals: true,
            },
        ],
        "new-cap": [
            "error",
            {
                newIsCap: true,
                newIsCapExceptions: [],
                capIsNew: false,
                capIsNewExceptions: [
                    "Immutable.Map",
                    "Immutable.Set",
                    "Immutable.List",
                ],
            },
        ],
        "new-parens": "error",
        "newline-per-chained-call": ["error", { ignoreChainWithDepth: 4 }],
        "no-alert": "error",
        "no-bitwise": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-console": ["error", { allow: ["warn", "error"] }],
        "no-continue": "off",
        "no-else-return": ["error", { allowElseIf: false }],
        "no-empty-pattern": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-fallthrough": "error",
        "no-floating-decimal": "error",
        "no-global-assign": ["error", { exceptions: [] }],
        "no-implied-eval": "error",
        "no-iterator": "error",
        "no-labels": ["error", { allowLoop: false, allowSwitch: false }],
        "no-lone-blocks": "error",
        "no-lonely-if": "error",
        "no-loop-func": "error",
        "no-mixed-spaces-and-tabs": "error",
        "no-multi-assign": "error",
        "no-multi-spaces": [
            "error",
            {
                ignoreEOLComments: false,
            },
        ],
        "no-multi-str": "error",
        "no-multiple-empty-lines": [
            "error",
            {
                max: 1,
                maxBOF: 0,
                maxEOF: 0,
            },
        ],
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-object": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": [
            "error",
            {
                props: true,
                ignorePropertyModificationsFor: [
                    "acc",
                    "accumulator",
                    "e",
                    "ctx",
                    "context",
                    "req",
                    "request",
                    "res",
                    "response",
                    "$scope",
                    "staticContext", // for ReactRouter context
                ],
            },
        ],
        "no-plusplus": ["off", { allowForLoopAfterthoughts: true }],
        "no-proto": "error",
        "no-redeclare": "error",
        "no-restricted-properties": [
            "error",
            {
                object: "arguments",
                property: "callee",
                message: "arguments.callee is deprecated",
            },
            {
                object: "global",
                property: "isFinite",
                message: "Please use Number.isFinite instead",
            },
            {
                object: "self",
                property: "isFinite",
                message: "Please use Number.isFinite instead",
            },
            {
                object: "window",
                property: "isFinite",
                message: "Please use Number.isFinite instead",
            },
            {
                object: "global",
                property: "isNaN",
                message: "Please use Number.isNaN instead",
            },
            {
                object: "self",
                property: "isNaN",
                message: "Please use Number.isNaN instead",
            },
            {
                object: "window",
                property: "isNaN",
                message: "Please use Number.isNaN instead",
            },
            {
                property: "__defineGetter__",
                message: "Please use Object.defineProperty instead.",
            },
            {
                property: "__defineSetter__",
                message: "Please use Object.defineProperty instead.",
            },
            {
                object: "Math",
                property: "pow",
                message: "Use the exponentiation operator (**) instead.",
            },
        ],
        "no-restricted-syntax": [
            "error",
            {
                selector: "ForInStatement",
                message: "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
            },
            // {
            //     "selector": "ForOfStatement",
            //     "message": "iterators/generators require regenerator-runtime, which is too"
            //                 + "heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
            // },
            {
                selector: "LabeledStatement",
                message: "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
            },
            {
                selector: "WithStatement",
                message: "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
            },
        ],
        "no-return-assign": ["error", "always"],
        "no-return-await": "error",
        "no-script-url": "error",
        "no-self-assign": [
            "error",
            {
                props: true,
            },
        ],
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-spaced-func": "error",
        "no-tabs": "error",
        "no-throw-literal": "off",
        "no-trailing-spaces": [
            "error",
            {
                skipBlankLines: false,
                ignoreComments: false,
            },
        ],
        "no-unneeded-ternary": ["error", { defaultAssignment: false }],
        "no-unused-labels": "error",
        "no-useless-catch": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-void": "error",
        "no-with": "error",
        "no-whitespace-before-property": "error",
        "nonblock-statement-body-position": [
            "error",
            "beside",
            { overrides: {} },
        ],
        "object-curly-spacing": ["error", "always"],
        "object-curly-newline": [
            "error",
            {
                ObjectExpression: {
                    minProperties: 4,
                    multiline: true,
                    consistent: true,
                },
                ObjectPattern: {
                    minProperties: 4,
                    multiline: true,
                    consistent: true,
                },
                ImportDeclaration: {
                    minProperties: 8,
                    multiline: true,
                    consistent: true,
                },
                ExportDeclaration: {
                    minProperties: 8,
                    multiline: true,
                    consistent: true,
                },
            },
        ],
        "object-property-newline": [
            "error",
            {
                allowAllPropertiesOnSameLine: true,
            },
        ],
        "one-var": ["error", "never"],
        "one-var-declaration-per-line": ["error", "always"],
        "operator-linebreak": [
            "error",
            "before",
            { overrides: { "=": "none" } },
        ],
        "padded-blocks": [
            "error",
            {
                blocks: "never",
                classes: "never",
                switches: "never",
            },
            {
                allowSingleLineBlocks: true,
            },
        ],
        "prefer-object-spread": "error",
        "quote-props": [
            "error",
            "as-needed",
            { keywords: false, unnecessary: true, numbers: false },
        ],
        radix: ["error", "as-needed"],
        "semi-spacing": ["error", { before: false, after: true }],
        "semi-style": ["error", "last"],
        "space-before-blocks": "error",
        "space-in-parens": ["error", "never"],
        "space-unary-ops": [
            "error",
            {
                words: true,
                nonwords: false,
                overrides: {},
            },
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                line: {
                    exceptions: ["-", "+"],
                    markers: ["=", "!", "/"], // space here to support sprockets directives, slash for TS /// comments
                },
                block: {
                    exceptions: ["-", "+"],
                    markers: ["=", "!", ":", "::"],
                    balanced: true,
                },
            },
        ],
        "switch-colon-spacing": ["error", { after: true, before: false }],
        "template-tag-spacing": ["error", "never"],
        "unicode-bom": ["error", "never"],
        "vars-on-top": "error",
        "wrap-iife": ["error", "outside", { functionPrototypeMethods: false }],
        yoda: "error",
        "no-debugger": "error"
    },
};
